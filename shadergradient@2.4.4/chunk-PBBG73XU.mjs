import {
  __export
} from "./chunk-5BEQP2BQ.mjs";

// src/shaders/cosmic/sphere/index.ts
var sphere_exports = {};
__export(sphere_exports, {
  fragment: () => fragment_default,
  vertex: () => vertex_default
});

// src/shaders/cosmic/sphere/fragment.glsl
var fragment_default = "// Cosmic Sphere Fragment Shader - Nebula Particle Effect\n\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;\nuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\n\nvarying vec3 vNormal;\nvarying float displacement;\nvarying vec3 vPos;\nvarying float vDistort;\nvarying vec2 vUv;\nvarying float vNebulaIntensity;\nvarying float vParticleDensity;\nvarying vec3 vCosmicSwirl;\n\nuniform float uTime;\nuniform float uSpeed;\n\nuniform float uC1r;\nuniform float uC1g;\nuniform float uC1b;\nuniform float uC2r;\nuniform float uC2g;\nuniform float uC2b;\nuniform float uC3r;\nuniform float uC3g;\nuniform float uC3b;\n\n// Nebula helper functions\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n}\n\nfloat noise2D(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// Fractal Brownian Motion for complex nebula patterns\nfloat fbm(vec2 p) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 1.0;\n    \n    for(int i = 0; i < 5; i++) {\n        value += amplitude * noise2D(p * frequency);\n        amplitude *= 0.5;\n        frequency *= 2.0;\n    }\n    return value;\n}\n\n// Star field generation\nfloat stars(vec2 p, float density) {\n    vec2 n = floor(p * density);\n    vec2 f = fract(p * density);\n    \n    float d = 1.0;\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 g = vec2(float(i), float(j));\n            vec2 o = hash(n + g) * vec2(1.0);\n            vec2 r = g + o - f;\n            d = min(d, dot(r, r));\n        }\n    }\n    \n    return 1.0 - smoothstep(0.0, 0.02, sqrt(d));\n}\n\n// for npm package, need to add this manually\nfloat linearToRelativeLuminance2( const in vec3 color ) {\n    vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n    return dot( weights, color.rgb );\n}\n\nvoid main() {\n\n  //-------- Cosmic Nebula Gradient ------------\n  vec3 color1 = vec3(uC1r, uC1g, uC1b);\n  vec3 color2 = vec3(uC2r, uC2g, uC2b);\n  vec3 color3 = vec3(uC3r, uC3g, uC3b);\n  \n  float clearcoat = 1.0;\n  float clearcoatRoughness = 0.1; // Very reflective for cosmic shine\n\n  #include <clipping_planes_fragment>\n\n  float t = uTime * uSpeed;\n  \n  // Calculate distance from center for radial effects\n  float distanceFromCenter = length(vPos);\n  float angle = atan(vPos.y, vPos.x);\n  \n  // Create complex nebula patterns using FBM\n  vec2 nebulaCoords = vPos.xy * 3.0 + vCosmicSwirl.xy;\n  float nebulaPattern1 = fbm(nebulaCoords + t * 0.1);\n  float nebulaPattern2 = fbm(nebulaCoords * 2.0 + t * 0.15);\n  float nebulaPattern3 = fbm(nebulaCoords * 4.0 + t * 0.2);\n  \n  // Combine nebula patterns\n  float combinedNebula = (nebulaPattern1 + nebulaPattern2 * 0.5 + nebulaPattern3 * 0.25) / 1.75;\n  \n  // Create particle-like bright spots\n  float particleField = stars(vPos.xy * 20.0 + t * 0.5, 50.0);\n  float microParticles = stars(vPos.xy * 80.0 + t * 1.0, 200.0) * 0.5;\n  \n  // Create cosmic dust clouds\n  float dustClouds = fbm(vPos.xy * 8.0 + t * 0.05) * 0.3;\n  \n  // Energy streams\n  float energyStream1 = sin(vPos.x * 15.0 + t * 3.0 + angle * 2.0) * 0.1;\n  float energyStream2 = cos(vPos.y * 20.0 + t * 2.5 + distanceFromCenter * 5.0) * 0.1;\n  \n  // Cosmic gradient mixing with nebula influence\n  float gradientX = smoothstep(-3.0, 3.0, vPos.x + combinedNebula * 2.0 + vCosmicSwirl.x * 3.0);\n  float gradientY = smoothstep(-3.0, 3.0, vPos.y + vNebulaIntensity * 1.5 + vCosmicSwirl.y * 2.0);\n  float gradientZ = smoothstep(-2.0, 2.0, vPos.z + dustClouds * 2.0);\n  \n  // Multi-layer color mixing\n  vec3 baseGradient = mix(\n    mix(color1, color2, gradientX), \n    color3, \n    gradientY * 0.6 + gradientZ * 0.4\n  );\n  \n  // Add nebula color variations\n  vec3 nebulaColor = baseGradient;\n  nebulaColor.r += combinedNebula * 0.3 + energyStream1;\n  nebulaColor.g += vNebulaIntensity * 0.2 + energyStream2;\n  nebulaColor.b += dustClouds * 0.4 + abs(vCosmicSwirl.z) * 0.5;\n  \n  // Add particle brightness\n  vec3 particleGlow = vec3(\n    particleField * 0.8 + microParticles * 0.4,\n    particleField * 0.6 + microParticles * 0.3,\n    particleField * 0.9 + microParticles * 0.5\n  );\n  \n  // Create pulsing cosmic energy\n  float cosmicPulse = sin(t * 1.5 + distanceFromCenter * 3.0) * 0.1 + 1.0;\n  \n  // Combine all effects\n  vec3 finalColor = (nebulaColor + particleGlow * 2.0) * cosmicPulse;\n  \n  // Add cosmic rim lighting effect\n  float rimLight = pow(1.0 - abs(dot(normalize(vNormal), normalize(vViewPosition))), 2.0);\n  finalColor += rimLight * 0.3 * (color1 + color2 + color3) / 3.0;\n  \n  // Enhance particle density areas\n  finalColor = mix(finalColor, finalColor * 1.5, vParticleDensity * 0.5);\n  \n  // Add subtle color temperature variation\n  float temperature = sin(angle * 3.0 + t * 0.8) * 0.1;\n  finalColor.r += temperature * 0.1;\n  finalColor.b -= temperature * 0.1;\n\n  vec4 diffuseColor = vec4(finalColor, 1.0);\n\n  //-------- Enhanced Materiality for Cosmic Effect ------------\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive + finalColor * 0.2; // Strong emission for nebula glow\n\n  #ifdef TRANSMISSION\n    float totalTransmission = transmission;\n  #endif\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <roughnessmap_fragment>\n  #include <metalnessmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <clearcoat_normal_fragment_begin>\n  #include <clearcoat_normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_physical_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n  \n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse +\n                      reflectedLight.directSpecular + reflectedLight.indirectSpecular +\n                      totalEmissiveRadiance;\n\n  #ifdef TRANSMISSION\n    diffuseColor.a *= mix(saturate(1. - totalTransmission +\n                        linearToRelativeLuminance2(reflectedLight.directSpecular +\n                                                  reflectedLight.indirectSpecular)),\n                1.0, metalness);\n  #endif\n\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n";

// src/shaders/cosmic/sphere/vertex.glsl
var vertex_default = "// Cosmic Sphere Vertex Shader - Nebula Effect\n// #pragma glslify: cnoise3 = require(glsl-noise/classic/3d) \n\n// noise source from https://github.com/hughsk/glsl-noise/blob/master/periodic/3d.glsl\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n//-------- Nebula Effect Functions ------------\n\nmat3 rotation3dY(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat3(c, 0.0, -s, 0.0, 1.0, 0.0, s, 0.0, c);\n}\n\nmat3 rotation3dX(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat3(1.0, 0.0, 0.0, 0.0, c, s, 0.0, -s, c);\n}\n\nmat3 rotation3dZ(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat3(c, s, 0.0, -s, c, 0.0, 0.0, 0.0, 1.0);\n}\n\nvec3 rotateY(vec3 v, float angle) { return rotation3dY(angle) * v; }\nvec3 rotateX(vec3 v, float angle) { return rotation3dX(angle) * v; }\nvec3 rotateZ(vec3 v, float angle) { return rotation3dZ(angle) * v; }\n\nvarying vec3 vNormal;\nvarying float displacement;\nvarying vec3 vPos;\nvarying float vDistort;\nvarying vec2 vUv;\nvarying float vNebulaIntensity;\nvarying float vParticleDensity;\nvarying vec3 vCosmicSwirl;\n\nuniform float uTime;\nuniform float uSpeed;\nuniform float uLoadingTime;\nuniform float uNoiseDensity;\nuniform float uNoiseStrength;\n\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\n\nvoid main() {\n\n  #include <beginnormal_vertex>\n  #include <color_vertex>\n  #include <defaultnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n  #include <uv2_vertex>\n  #include <uv_vertex>\n  #ifndef FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #ifdef USE_TANGENT\n    vTangent = normalize(transformedTangent);\n    vBitangent = normalize(cross(vNormal, vTangent) * tangent.w);\n  #endif\n  #endif\n  #include <begin_vertex>\n\n  #include <clipping_planes_vertex>\n  #include <displacementmap_vertex>\n  #include <logdepthbuf_vertex>\n  #include <morphtarget_vertex>\n  #include <project_vertex>\n  #include <skinning_vertex>\n    vViewPosition = -mvPosition.xyz;\n  #include <fog_vertex>\n  #include <shadowmap_vertex>\n  #include <worldpos_vertex>\n\n  //-------- Cosmic Nebula Effect ------------\n  vUv = uv;\n  \n  float t = uTime * uSpeed;\n  \n  // Create swirling nebula patterns\n  vec3 swirlCenter = vec3(0.0, 0.0, 0.0);\n  vec3 toCenter = position - swirlCenter;\n  float distanceFromCenter = length(toCenter);\n  \n  // Create spiral motion\n  float angle = atan(toCenter.y, toCenter.x);\n  float spiralAngle = angle + distanceFromCenter * 2.0 + t * 0.5;\n  \n  // Multi-octave noise for nebula density\n  float nebula1 = cnoise(position * uNoiseDensity * 0.8 + vec3(t * 0.2, t * 0.3, t * 0.1));\n  float nebula2 = cnoise(position * uNoiseDensity * 1.5 + vec3(t * 0.4, t * 0.2, t * 0.5)) * 0.7;\n  float nebula3 = cnoise(position * uNoiseDensity * 3.0 + vec3(t * 0.8, t * 0.6, t * 0.9)) * 0.4;\n  float nebula4 = cnoise(position * uNoiseDensity * 6.0 + vec3(t * 1.2, t * 1.0, t * 1.4)) * 0.2;\n  \n  // Combine nebula layers for complexity\n  float nebulaPattern = nebula1 + nebula2 + nebula3 + nebula4;\n  vNebulaIntensity = abs(nebulaPattern);\n  \n  // Create particle-like density variations\n  float particleDensity = cnoise(position * uNoiseDensity * 8.0 + vec3(t * 2.0, t * 1.5, t * 2.5));\n  vParticleDensity = smoothstep(-0.3, 0.8, particleDensity);\n  \n  // Create cosmic swirl effect\n  vec3 swirl = vec3(\n    sin(spiralAngle + t * 0.3) * distanceFromCenter * 0.1,\n    cos(spiralAngle + t * 0.2) * distanceFromCenter * 0.1,\n    sin(distanceFromCenter * 3.0 + t * 0.4) * 0.05\n  );\n  vCosmicSwirl = swirl;\n  \n  // Create pulsing effect for cosmic energy\n  float pulse = sin(t * 2.0 + distanceFromCenter * 5.0) * 0.1 + 1.0;\n  \n  // Apply complex displacement\n  float totalDisplacement = nebulaPattern * uNoiseStrength * uLoadingTime * pulse;\n  \n  // Add swirl displacement\n  vec3 pos = position + normal * totalDisplacement + swirl * 0.3;\n  vPos = pos;\n  \n  // Add cosmic rotation for dynamic feel\n  pos = rotateY(pos, sin(t * 0.1 + distanceFromCenter) * 0.1);\n  pos = rotateX(pos, cos(t * 0.08 + angle) * 0.08);\n  pos = rotateZ(pos, sin(t * 0.05 + spiralAngle) * 0.05);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n";

export {
  fragment_default,
  vertex_default,
  sphere_exports
};
