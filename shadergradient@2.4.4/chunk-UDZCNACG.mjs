import {
  __export
} from "./chunk-5BEQP2BQ.mjs";

// src/shaders/cosmic/plane/index.ts
var plane_exports = {};
__export(plane_exports, {
  fragment: () => fragment_default,
  vertex: () => vertex_default
});

// src/shaders/cosmic/plane/fragment.glsl
var fragment_default = "// Cosmic Plane Fragment Shader - Holographic Gradient\n\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;\nuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\n\nvarying vec3 vNormal;\nvarying float displacement;\nvarying vec3 vPos;\nvarying float vDistort;\nvarying vec2 vUv;\nvarying float vHolographicIntensity;\nvarying float vCosmicWave;\n\nuniform float uTime;\nuniform float uSpeed;\n\nuniform float uC1r;\nuniform float uC1g;\nuniform float uC1b;\nuniform float uC2r;\nuniform float uC2g;\nuniform float uC2b;\nuniform float uC3r;\nuniform float uC3g;\nuniform float uC3b;\n\n// Holographic helper functions\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n}\n\nfloat noise2D(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// for npm package, need to add this manually\nfloat linearToRelativeLuminance2( const in vec3 color ) {\n    vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n    return dot( weights, color.rgb );\n}\n\nvoid main() {\n\n  //-------- Cosmic Holographic Gradient ------------\n  vec3 color1 = vec3(uC1r, uC1g, uC1b);\n  vec3 color2 = vec3(uC2r, uC2g, uC2b);\n  vec3 color3 = vec3(uC3r, uC3g, uC3b);\n  \n  float clearcoat = 1.0;\n  float clearcoatRoughness = 0.2; // More reflective for holographic effect\n\n  #include <clipping_planes_fragment>\n\n  float t = uTime * uSpeed;\n  \n  // Create holographic interference patterns\n  float interference1 = sin(vPos.x * 20.0 + t * 3.0) * cos(vPos.y * 15.0 + t * 2.0);\n  float interference2 = sin(vPos.x * 35.0 + t * 4.0) * sin(vPos.y * 30.0 + t * 3.5);\n  float interference3 = cos(vPos.x * 50.0 + t * 5.0) * cos(vPos.y * 45.0 + t * 4.5);\n  \n  // Combine interference patterns\n  float holographicPattern = (interference1 + interference2 * 0.5 + interference3 * 0.25) / 1.75;\n  \n  // Create cosmic shimmer effect\n  float shimmer = noise2D(vPos.xy * 40.0 + t * 2.0) * 0.3;\n  float cosmicGlow = noise2D(vPos.xy * 8.0 + t * 0.5) * 0.5;\n  \n  // Holographic color shifting\n  vec3 holographicShift = vec3(\n    sin(vPos.x * 10.0 + t * 2.0 + 0.0) * 0.1,\n    sin(vPos.x * 10.0 + t * 2.0 + 2.094) * 0.1,  // 120 degrees\n    sin(vPos.x * 10.0 + t * 2.0 + 4.188) * 0.1   // 240 degrees\n  );\n  \n  // Enhanced gradient mixing with cosmic effects\n  float gradientX = smoothstep(-4.0, 4.0, vPos.x + holographicPattern * 2.0);\n  float gradientY = smoothstep(-4.0, 4.0, vPos.y + vCosmicWave * 1.5);\n  float gradientZ = smoothstep(-2.0, 2.0, vPos.z + shimmer);\n  \n  // Multi-layer color mixing for depth\n  vec3 baseGradient = mix(\n    mix(color1, color2, gradientX), \n    color3, \n    gradientY * 0.7 + gradientZ * 0.3\n  );\n  \n  // Apply holographic color shifts\n  vec3 holographicColor = baseGradient + holographicShift;\n  \n  // Add cosmic glow and shimmer\n  vec3 cosmicEnhancement = vec3(\n    cosmicGlow * 0.2,\n    shimmer * 0.15,\n    (cosmicGlow + shimmer) * 0.1\n  );\n  \n  // Holographic intensity modulation\n  float intensityMod = 1.0 + vHolographicIntensity * 0.5 + abs(holographicPattern) * 0.3;\n  \n  // Final color with cosmic and holographic effects\n  vec3 finalColor = (holographicColor + cosmicEnhancement) * intensityMod;\n  \n  // Add subtle iridescence\n  float iridescence = sin(vPos.x * 25.0 + t * 3.0) * cos(vPos.y * 20.0 + t * 2.5) * 0.1;\n  finalColor += vec3(iridescence * 0.2, iridescence * 0.3, iridescence * 0.4);\n\n  vec4 diffuseColor = vec4(finalColor, 1.0);\n\n  //-------- Enhanced Materiality for Holographic Effect ------------\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive + finalColor * 0.1; // Add some emission for glow\n\n  #ifdef TRANSMISSION\n    float totalTransmission = transmission;\n  #endif\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <roughnessmap_fragment>\n  #include <metalnessmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <clearcoat_normal_fragment_begin>\n  #include <clearcoat_normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_physical_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n  \n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse +\n                      reflectedLight.directSpecular + reflectedLight.indirectSpecular +\n                      totalEmissiveRadiance;\n\n  #ifdef TRANSMISSION\n    diffuseColor.a *= mix(saturate(1. - totalTransmission +\n                        linearToRelativeLuminance2(reflectedLight.directSpecular +\n                                                  reflectedLight.indirectSpecular)),\n                1.0, metalness);\n  #endif\n\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n";

// src/shaders/cosmic/plane/vertex.glsl
var vertex_default = "// Cosmic Plane Vertex Shader - Holographic Effect\n// #pragma glslify: cnoise3 = require(glsl-noise/classic/3d) \n\n// noise source from https://github.com/hughsk/glsl-noise/blob/master/periodic/3d.glsl\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n//-------- Holographic Effect Functions ------------\n\nmat3 rotation3dY(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat3(c, 0.0, -s, 0.0, 1.0, 0.0, s, 0.0, c);\n}\n\nmat3 rotation3dX(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat3(1.0, 0.0, 0.0, 0.0, c, s, 0.0, -s, c);\n}\n\nvec3 rotateY(vec3 v, float angle) { return rotation3dY(angle) * v; }\nvec3 rotateX(vec3 v, float angle) { return rotation3dX(angle) * v; }\n\nvarying vec3 vNormal;\nvarying float displacement;\nvarying vec3 vPos;\nvarying float vDistort;\nvarying vec2 vUv;\nvarying float vHolographicIntensity;\nvarying float vCosmicWave;\n\nuniform float uTime;\nuniform float uSpeed;\nuniform float uLoadingTime;\nuniform float uNoiseDensity;\nuniform float uNoiseStrength;\n\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\n\nvoid main() {\n\n  #include <beginnormal_vertex>\n  #include <color_vertex>\n  #include <defaultnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n  #include <uv2_vertex>\n  #include <uv_vertex>\n  #ifndef FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #ifdef USE_TANGENT\n    vTangent = normalize(transformedTangent);\n    vBitangent = normalize(cross(vNormal, vTangent) * tangent.w);\n  #endif\n  #endif\n  #include <begin_vertex>\n\n  #include <clipping_planes_vertex>\n  #include <displacementmap_vertex>\n  #include <logdepthbuf_vertex>\n  #include <morphtarget_vertex>\n  #include <project_vertex>\n  #include <skinning_vertex>\n    vViewPosition = -mvPosition.xyz;\n  #include <fog_vertex>\n  #include <shadowmap_vertex>\n  #include <worldpos_vertex>\n\n  //-------- Cosmic Holographic Effect ------------\n  vUv = uv;\n  \n  float t = uTime * uSpeed;\n  \n  // Create holographic interference patterns\n  float holographicPattern = sin(position.x * 15.0 + t * 2.0) * \n                            sin(position.y * 12.0 + t * 1.5) * 0.1;\n  \n  // Cosmic wave distortion\n  float cosmicWave = cnoise(position * uNoiseDensity * 0.5 + vec3(t * 0.3, t * 0.2, t * 0.4));\n  vCosmicWave = cosmicWave;\n  \n  // Multi-layer noise for depth\n  float noise1 = cnoise(position * uNoiseDensity * 2.0 + t * 0.8);\n  float noise2 = cnoise(position * uNoiseDensity * 0.3 + t * 0.2) * 0.5;\n  float noise3 = cnoise(position * uNoiseDensity * 4.0 + t * 1.2) * 0.25;\n  \n  float combinedNoise = noise1 + noise2 + noise3;\n  \n  // Holographic shimmer effect\n  float shimmer = sin(position.x * 30.0 + t * 4.0) * \n                  cos(position.y * 25.0 + t * 3.0) * 0.05;\n  \n  // Calculate holographic intensity for fragment shader\n  vHolographicIntensity = abs(holographicPattern) + abs(shimmer) * 2.0;\n  \n  // Apply displacement with holographic and cosmic effects\n  float totalDisplacement = (combinedNoise + holographicPattern + shimmer) * uNoiseStrength * uLoadingTime;\n  \n  vec3 pos = position + normal * totalDisplacement;\n  vPos = pos;\n  \n  // Add subtle rotation effect for cosmic feel\n  pos = rotateY(pos, sin(t * 0.1) * 0.05);\n  pos = rotateX(pos, cos(t * 0.07) * 0.03);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n";

export {
  fragment_default,
  vertex_default,
  plane_exports
};
